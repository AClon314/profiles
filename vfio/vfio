#!/bin/bash
. ./config.conf

BASE0=$(basename $0) 
FULL0="$(readlink -f "$0")"
DIR0=$(dirname $FULL0)

lspci_grep() {
  lspci -nnk |\
  grep "$1" --color=always &&\

  lspci -nnk |\
  grep "$1" -A 3 |\
  grep "Kernel driver in use" --color=always
}
get_pci() {
  nr=${2:-1}
  # choose $0 of first line, with replaced ':'&'.' to '_'
  lspci_grep $1 | awk -v nr="$nr" 'NR==nr {print $1}' | tr ':.' '_'
}
get_v_d () {
  nr=${2:-1}
  lspci_grep $1 | awk -v nr="$nr" 'NR==nr {match($0, /\[[0-9a-f]{4}:[0-9a-f]{4}\]/); print substr($0, RSTART+1, LLENGTH+9)}'
}
len() {
  lenght=0
  declare -n arr=$1 # Èó¥Êé•ÂºïÁî®
  for key in "${!arr[@]}"; do
    if [[ -n "${arr[$key]}" ]]; then
      # echo -e "$key\t${arr[$key]}" | grep $key --color=always > /dev/stderr
      let lenght++
    fi
  done
  echo $lenght
}
what_dm() {
  systemctl status display-manager | grep "Display Manager" -A 2
}
what_gpu() {
  __NV_PRIME_RENDER_OFFLOAD=1
  __GLX_VENDOR_LIBRARY_NAME=nvidia
  glxinfo | grep "vendor" --color=always # vendor=ÂéÇÂïÜ
}
dialog_choice() {
  # echo $GPU_KEY
  local options=()
  for key in "${!PCI_GPU[@]}"; do
    [[ "${GPU_KEY[*]}" =~ $key ]] && default="on" || default="off"
    [[ -n ${PCI_GPU[$key]} ]] && options+=("$key" "${PCI_GPU[$key]}" $default)
  done

  cmd=(dialog --keep-tite --separate-output --checklist "$1" 0 0 0)
  CHOICES=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
  CHOICES=$(echo "$CHOICES" | tr '\n' ' ' | sed 's/.$//')
}
select_gpu() {
  has_GPU=$(len PCI_GPU)
  
  if [ $has_GPU -eq 0 ]; then
    echo "No supported GPU found! run lspci" | grep lspci
  elif [ $has_GPU -eq 1 ]; then
    # TODO: support single GPU && all gpu separated
    echo Not support Single GPU yet! but you can follow this tutorial:
    echo üåê https://github.com/ledisthebest/LEDs-single-gpu-passthrough/blob/main/README.md
  else
    which dialog > /dev/null || (
      . /etc/os-release
      echo "‚ùå $PRETTY_NAME not support dialog, edit ./config.conf manually!" && exit 1)
    dialog_choice "Select GPU to passthrough"
    if [[ -n $CHOICES ]]; then
      sed -i "s/GPU_KEY=\(.*\)/GPU_KEY=\($CHOICES\)/g" ./config.conf
    fi
  fi
  . ./config.conf
}
how_gpu() {
  lspci_grep "NVIDIA"
  lspci_grep "Radeon" | grep Mobile -C 9
  lspci_grep "Intel.*Integrated Graphics"
}
config_gpu() {
  config PCI_GPU[nvidia] $(get_pci "NVIDIA")
  config PCI_AUD[nvidia] $(get_pci "NVIDIA" 2)
  config V_D_GPU[nvidia] $(get_v_d "NVIDIA")
  config V_D_AUD[nvidia] $(get_v_d "NVIDIA" 2)

  if lspci_grep "Radeon" | grep Mobile > /dev/null; then
    i="_i"
  fi
  config PCI_GPU[amd$i] $(get_pci "Radeon")
  config V_D_GPU[amd$i] $(get_v_d "Radeon")
  config V_D_AUD[amd$i] $(get_v_d "Radeon")

  config PCI_GPU[intel] $(get_pci "Intel.*Integrated Graphics"| awk '{print $1}')
  config V_D_GPU[intel] $(get_v_d "Intel.*Integrated Graphics")
  config V_D_AUD[intel] $(get_v_d "Intel.*Integrated Graphics")
  . ./config.conf
}
log() {
  dmesg -T | awk '/apparmor/ && /(libvirtd|qemu|vfio)/'
  Yn "üîç check libvirt-qemu log?" && {\
    for i in $(ls /var/log/libvirt/qemu/*.log); do
      sudo nano +999999 $i
    done
    yN "üóë Clean all libvirt-qemu logs?" && echo -n| sudo tee /var/log/libvirt/qemu/*.log;
  }
  # strace -f -o strace.log virsh dumpxml $1
  # sudo ls /var/log/libvirt/qemu/*-virtiofsd.log && sudo kill $(lsof -t /var/log/libvirt/qemu/*-virtiofsd.log)
  lsmod | grep -i nvidia --color=always
  sudo lsof -w /dev/nvidia*
}

launch_looking_glass() {
  looking-glass-client -s -m 97
}
install() {
  sudo mkdir -p /etc/libvirt/hooks &&\
  sudo cp $DIR0/* /etc/libvirt/hooks/ &&\
  echo "üéâ Once you edit files in $DIR0, run
    $0 i
to update to /etc/libvirt/hooks" | grep "$0 i" -C 9 --color=always
  # sudo ln -s $DIR0/* /etc/libvirt/hooks/ &&\
}
uninstall() {
  ls | xargs -I % sudo rm /etc/libvirt/hooks/%
  sudo find /etc/libvirt/hooks/ -type l -exec test ! -e {} \; -delete # remove broken symlink
}
h2o_xorg() {
  # 0A_00_1 to 10:00:1
  IFS='_' read -r -a segments <<< "$1"
  for index in "${!segments[@]}"; do
    segments[index]=$((16#${segments[index]}))
  done
  echo "${segments[0]}:${segments[1]}:${segments[2]}"
}
fix_xorg() {
  # https://stackoverflow.com/questions/18382271/how-can-i-modify-xorg-conf-file-to-force-x-server-to-run-on-a-specific-gpu-i-a
  local PCI_XORG=$(h2o_xorg ${PCI_GPU[$XORG_KEY]})
  { grep $PCI_XORG $XORG_CONFIG > /dev/null && grep "Driver \"$XORG_DRIVER_NAME\"" $XORG_CONFIG > /dev/null;  } &&\
  echo "‚úî xorg only use integrate gpu" ||\
  { echo "Section \"Device\"
    Identifier \"Device0\"
    Driver \"$XORG_DRIVER_NAME\"
    BusID \"PCI:$PCI_XORG\"
EndSection" | sudo tee $XORG_CONFIG > /dev/null &&\
  echo "‚ö†Ô∏è Fixed, reboot to release $GPU_KEY from xorg"; }
}
checkAndFix() {
  echo "üîß restarting service, should in < 15s"
  sudo systemctl restart libvirtd virtlogd
  sudo chmod +x ./*

  if sudo dmesg | grep -e DMAR -e IOMMU > /dev/null; then
    echo "‚úî grub iommu"
  else
    grep "iommu" /etc/default/grub >/dev/null &&\
    echo "‚úî Skip add iommu in grub" ||\
    (
      sudo sed -i 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 iommu=pt amd_iommu=on intel_iommu=on"/' /etc/default/grub &&\
      sudo update-grub && echo || sudo grub-mkconfig -o /boot/grub/grub.cfg
      echo "‚ö†Ô∏è Reboot to enable iommu"
    )
  fi
  # sudo grep Y /sys/module/nvidia_drm/parameters/modeset >/dev/null && echo "‚úî nvidia_drm modeset" || echo "‚ö†Ô∏è nvidia_drm modeset off"

  lsmod | grep nouveau > /dev/null && echo "‚ö†Ô∏è nouveau running" || echo "‚úî nouveau off"
  grep vfio /etc/modules > /dev/null && echo "‚úî vfio enable" ||\
  { echo "vfio" | sudo tee -a /etc/modules >/dev/null && sudo update-initramfs -u -k all && echo "‚ö†Ô∏è Fixed, reboot to enable vfio startup" || echo "‚ùå Fail to fix vfio startup"; }
  lsmod | grep vfio > /dev/null && echo "‚úî vfio running" || echo "‚ö†Ô∏è vfio not running"
  fix_xorg
}

xml_optimize() {
  echo "ÊòØÂê¶Â∑≤Âú®ËôöÊãüÊú∫ÂÜÖÂÆâË£Ö‰∫ÜvirtioÈ©±Âä®? Á®çÂêéÂ∞Ü‰ºòÂåñË∞ÉÊï¥xml"
  echo "Have you installed virtio driver in Windows(or guest)? Continue will optimize XML of vm"
  yN "Start Optimize virtio?" || exit 1
echo '<devices>
  <disk type="file" device="disk">
    <driver name="qemu" type="qcow2" discard="unmap"/>
    <target dev="sda" bus="sata‚Üívirtio"/>' | grep virtio -C 99 --color=always
echo '
    <input type="evdev">
      <source dev="/dev/input/by-id/usb-PixArt_Lenovo_USB_Optical_Mouse-event-mouse"/>
    </input>
    <input type="evdev">
      <source dev="/dev/input/by-path/platform-i8042-serio-0-event-kbd" grab="all" grabToggle="ctrl-ctrl" repeat="on"/>
    </input>' | grep evdev -C 99 --color=always
echo '
  <sound model="ich9">
    <hostdev mode="subsystem" type="pci" managed="yes">
      <source>
        <address domain="0x0000" bus="0x01" slot="0x00" function="0x0"/>
      </source>
      <address type="pci" domain="0x0000" bus="0x05" slot="0x00" function="0x0"/>
    </hostdev>
    <hostdev mode="subsystem" type="pci" managed="yes">
      <source>
        <address domain="0x0000" bus="0x01" slot="0x00" function="0x1"/>
      </source>
      <address type="pci" domain="0x0000" bus="0x06" slot="0x00" function="0x0"/>
    </hostdev>' | grep -e subsystem -e hostdev -C 99 --color=always
# echo 'gl no???'
}
helpme() {
  echo -e "Usage:\t$0 list|setup|install|uninstall|looking|what|helpme|about"
  echo "PCI Passthrough: https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF"
}
about() {
  echo -e "\tCredits"
  echo "Seamless Solution on dual-GPU laptop by"
  echo "üêßBlandManStudios: https://www.youtube.com/watch?v=LtgEUfpRbZA"
  echo
  echo "Single GPU without logoff by"
  echo "üêßledisthebest: https://github.com/ledisthebest/LEDs-single-gpu-passthrough/blob/main/README.md"
}

if [ -z "$1" ]; then
  how_gpu
  echo
  what_gpu
  echo
  helpme
elif [[ "$1" == "setup" || "$1" == "s" ]]; then
  checkAndFix
  echo "ü™û looking-glass" && bash $(find . -name 'lookingGlass_*' | head -n 1)
  config_gpu
  select_gpu

  vd=""
  for key in ${GPU_KEY[@]}; do
    vd+=${V_D_GPU[$key]} && vd+=","
    [[ -n ${V_D_AUD[$key]} ]] && vd+=${V_D_AUD[$key]} && vd+=","
  done
  # ÂéªÊéâvdÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶
  vd=${vd%?}
  sudo grep "ids=$vd" /etc/modprobe.d/vfio.conf > /dev/null && echo "‚úî vfio-pci option $vd" ||\
  (
    echo "options vfio-pci ids=$vd" | sudo tee /etc/modprobe.d/vfio.conf &&\
# echo "options vfio-pci disable_idle_d3=1
# options vfio-pci disable_vga=1"  | sudo tee /etc/modprobe.d/vfio.conf &&\
    echo "‚ö†Ô∏è Reboot to enable vfio-pci"
  )

  uninstall
  install
  xml_optimize
elif [[ "$1" == "install" || "$1" == "i" ]]; then
  uninstall
  install
elif [[ "$1" == "uninstall" || "$1" == "u" ]]; then
  Yn "uninstall?" && uninstall
elif [[ "$1" == "what" ]]; then
  what_gpu
elif [[ "$1" == "lo"* ]]; then
  log
elif [[ "$1" == "looking" ]]; then
  launch_looking_glass
elif [[ "$1" == "about" ]]; then
  about
elif [[ "$1" == *"help" || "$1" == "h" ]]; then
  helpme
elif [[ "$1" == *"l"* ]]; then
  how_gpu
  echo
  what_gpu
else
  echo "Invalid command: $1"
  exit 1
fi
# getent group